<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Front-matter写法注意点</title>
    <url>/post/103d05/</url>
    <content><![CDATA[<html><head></head><body><p>每个单词后冒号必须是英文，且冒号后必须有一个空格</p>
</body></html>]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/post/dc4c1419/</url>
    <content><![CDATA[<html><head></head><body><h1>xxx</h1>
<h2 id="相对路径显示图片">相对路径显示图片</h2>
<p>已放弃，改为图床</p>
<p><img src="/post/dc4c1419/photo.png" alt="photo"></p>
<div class="hide-toggle"><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>Butterfly安装方法</span></div>
    <div class="hide-content"><p>在你的博客根目录里</p>
<p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly</p>
<p>如果想要安装比较新的dev分支，可以</p>
<p>git clone -b dev <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly</p>
</div></div>
<h2 id="mermaid">mermaid</h2>
<div class="mermaid">pie
    title Key elements in Product X
    "Calcium" : 42.96
    "Potassium" : 50.05
    "Magnesium" : 10.01
    "Iron" :  5</div>
<h2 id="tabs">tabs</h2>
<div class="tabs" id="nico"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#nico-1">nico 1</button></li><li class="tab"><button type="button" data-href="#nico-2">nico 2</button></li><li class="tab"><button type="button" data-href="#nico-3">nico 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="nico-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="nico-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="nico-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h2 id="button">button</h2>
<p>This is my website, click the button <a class="btn-beautify button--animated " href="https://butterfly.js.org/" title="Butterfly"><span>Butterfly</span></a><br>
This is my website, click the button <a class="btn-beautify button--animated " href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>
This is my website, click the button <a class="btn-beautify button--animated outline" href="https://butterfly.js.org/" title="Butterfly"><span>Butterfly</span></a><br>
This is my website, click the button <a class="btn-beautify button--animated outline" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>
This is my website, click the button <a class="btn-beautify button--animated larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p>
<a class="btn-beautify button--animated larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated blue larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated pink larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated red larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated purple larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated orange larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated green larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<div class="btn-center">
<a class="btn-beautify button--animated outline larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated outline blue larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated outline pink larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated outline red larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated outline purple larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated outline orange larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify button--animated outline green larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
</div>
## inlineImg
<p>你看我长得漂亮不</p>
<p><img src="https://i.loli.net/2021/03/19/2P6ivUGsdaEXSFI.png" alt=""></p>
<p>我觉得很漂亮 <img class="inline-img" src="https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png" style="height:150px"></p>
<h2 id="label">label</h2>
<p>臣亮言：<mark class="hl-label default">先帝</mark> 创业未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此诚<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈于内；<mark class="hl-label purple">忠志之士</mark> ，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>
宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p>
</body></html>]]></content>
  </entry>
  <entry>
    <title>数据库编程</title>
    <url>/post/8c5e4b35/</url>
    <content><![CDATA[<html><head></head><body><h1>数据库编程</h1>
<p>从前面我们知道数据库概念包含数据库文件、服务器和数据库客户端客户端我们之前已经用过的有navicat/mysql-client等程序。</p>
<p>大家会发现如果用之前客户端几乎是不可能完全这个任务的，因为我们不可能去构造出那个插入10w行数据的SQL·可是，如果我们有一个功能能够插入一行数据，借助程序强大的特点-重复，就可以轻而易举的就将10w行数据收入磨下。这种通过使用程序代码的方式去连接数据库服务器，==通过和服务器进行交互完成对数据库的增删改查的方式，就称为数据库编程。==<br>
而此刻学习的pymysql就是一种客户端。</p>
<p>使用python代码充当客户端，连接数据库进行操作</p>
<p>步骤：</p>
<ul>
<li>导入模块 pymysql</li>
<li>建立连接对象 pymysql.connect()</li>
<li>创建游标对象</li>
<li>使用游标对象执行SQL语句</li>
</ul>
<blockquote>
<p>cur.execute("sql语句”）</p>
<p>execute()有返回值</p>
<p>1)增删改，影响的行数</p>
<p>2)查询，总记录数</p>
</blockquote>
<ul>
<li>获取执行的结果</li>
</ul>
<blockquote>
<p>1）取1条cur.fetchone（）#元组</p>
<p>2）取所有cur.fetchall（）#（(），(），(））</p>
</blockquote>
<ul>
<li>打印输出获取的内容</li>
</ul>
<blockquote>
<p>for line in result_list:<br>
print(line)</p>
</blockquote>
<ul>
<li>关闭游标对象</li>
</ul>
<blockquote>
<p>cur.close()</p>
</blockquote>
<ul>
<li>关闭连接对象</li>
</ul>
<blockquote>
<p>conn.close()</p>
</blockquote>
<p><img src="/post/8c5e4b35/zyu0-2020-11-07_13-34-18-1604727271305.png" alt="zyu0-2020-11-07_13-34-18"></p>
<p><img src="/post/8c5e4b35/zyu0-2020-11-07_13-36-52.png" alt="zyu0-2020-11-07_13-36-52"></p>
<p><img src="/post/8c5e4b35/zyu0-2020-11-07_13-43-51.png" alt="zyu0-2020-11-07_13-43-51"></p>
<p><img src="/post/8c5e4b35/zyu0-2020-11-07_13-43-13.png" alt="zyu0-2020-11-07_13-43-13"></p>
<h2 id="Python操作数据库CURD">Python操作数据库CURD</h2>
<p>操作步骤：</p>
<ul>
<li>导入模块</li>
<li>创建连接对象</li>
<li>创建游标对象。</li>
<li>使用游标对象执行SQL</li>
</ul>
<blockquote>
<p>execute()</p>
</blockquote>
<ul>
<li>提交</li>
</ul>
<blockquote>
<p>conn.commit()</p>
</blockquote>
<ul>
<li>获取执行的结果（影响的行数）并打印执行的结果</li>
<li>关闭游标</li>
<li>关闭连接</li>
</ul>
<h1>SQL防注入</h1>
<p>什么是SOL注入</p>
<p>产生原因：后台用户提交的带有恶意的数据和SQL进行字符串方式的拼接，从而影响了SQL语句的语义，最终产生数据泄露的现象·如果防止：sql语句的参数化，将SQL语句的所有数据参数存在一个列表中传递给execute函数的二个参数</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">input_name <span class="operator">=</span> input("请输入要查询的名称:\n")</span><br><span class="line"># <span class="number">4</span>、使用游标对象执行<span class="keyword">SQL</span>语句</span><br><span class="line"># 被注入过程分析</span><br><span class="line"># input_name <span class="operator">=</span> <span class="string">' or 1 or '</span></span><br><span class="line"># "select * from goods where name = '%s' order by id desc" <span class="operator">%</span> input_name</span><br><span class="line"># "select * from goods where name = '' or 1 or '' order by id desc" <span class="operator">%</span> input_name</span><br><span class="line"># 防止注入：</span><br><span class="line"># <span class="number">1</span>)　构建参数列表params <span class="operator">=</span> input_name</span><br><span class="line"># <span class="number">2</span>) 把列表传递给 excute(<span class="keyword">sql</span>, params)</span><br><span class="line">params <span class="operator">=</span> [input_name]</span><br><span class="line"><span class="keyword">sql</span> <span class="operator">=</span> "select * from goods where name = '' or 1 or '' order by id desc"  # 这里不知为何参数可以自行替代</span><br><span class="line"># cur.execute(<span class="keyword">SQL</span>语句)　返回值是影响的行数，如果是查询语句，此处返回总记录数</span><br><span class="line"><span class="keyword">result</span> <span class="operator">=</span> cur.execute(<span class="keyword">sql</span>)</span><br><span class="line">print("查询到%s" <span class="operator">%</span> <span class="keyword">result</span>)</span><br><span class="line"># <span class="number">5</span>、获取执行的结果</span><br><span class="line"># cur.fetchone()从查询结果中取出一条数据。数据库默认升序，此函数会取出第一条数据</span><br><span class="line"># result_list <span class="operator">=</span> cur.fetchone()</span><br><span class="line">result_list <span class="operator">=</span> cur.fetchall()</span><br><span class="line"></span><br><span class="line"># <span class="number">6</span>、打印输出获取的内容</span><br><span class="line"># print(result_list)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> result_list:</span><br><span class="line">    # line即一行数据，是一个元组</span><br><span class="line">    print(line)</span><br><span class="line"></span><br><span class="line"># <span class="number">7</span>、关闭游标对象</span><br><span class="line">cur.close()</span><br><span class="line"># <span class="number">8</span>、关闭连接对象</span><br><span class="line">conn.close()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>防注入的思路：</p>
<p>sql中需要变化的地方，可以占位符%s %d…</p>
<p>把参数封装到列表中</p>
<p>把列表传递给 execute(sql，列表）</p>
</body></html>]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL索引-B+树</title>
    <url>/post/de75e3e6/</url>
    <content><![CDATA[<html><head></head><body><p><a href="http://www.liuzk.com/category/tech"> 技术经验</a> <a href="http://www.liuzk.com/author/goomoon">goomoon</a> 1年前 (2019-11-12) 22952浏览 <a href="http://www.liuzk.com/410.html#comments">0评论</a></p>
<p>索引是一种数据结构，用于帮助我们在大量数据中快速定位到我们想要查找的数据。<br>
索引最形象的比喻就是图书的目录了。注意这里的大量，数据量大了索引才显得有意义，如果我想要在 [1,2,3,4] 中找到 4 这个数据，直接对全数据检索也很快，没有必要费力气建索引再去查找。</p>
<span id="more"></span>
<h3 id="索引在-MySQL-数据库中分三类：">索引在 MySQL 数据库中分三类：</h3>
<ul>
<li>B+ 树索引</li>
<li>Hash 索引</li>
<li>全文索引</li>
</ul>
<p>我们今天要介绍的是工作开发中最常接触到的 InnoDB 存储引擎中的 B+ 树索引。要介绍 B+ 树索引，就不得不提二叉查找树，平衡二叉树和 B 树这三种数据结构。B+ 树就是从他们仨演化来的。</p>
<h2 id="二叉查找树">二叉查找树</h2>
<p>首先，让我们先看一张图：</p>
<p><a href="http://www.liuzk.com/wp-content/uploads/2019/11/1.jpg"><img src="/post/de75e3e6/1.jpg" alt="1"></a></p>
<p>从图中可以看到，我们为 user 表（用户信息表）建立了一个二叉查找树的索引。</p>
<p>图中的圆为二叉查找树的节点，节点中存储了键（key）和数据（data）。键对应 user 表中的 id，数据对应 user 表中的行数据。</p>
<p>二叉查找树的特点就是任何节点的左子节点的键值都小于当前节点的键值，右子节点的键值都大于当前节点的键值。顶端的节点我们称为根节点，没有子节点的节点我们称之为叶节点。</p>
<p>如果我们需要查找 id=12 的用户信息，利用我们创建的二叉查找树索引，查找流程如下：</p>
<ul>
<li>将根节点作为当前节点，把 12 与当前节点的键值 10 比较，12 大于 10，接下来我们把当前节点&gt;的右子节点作为当前节点。</li>
<li>继续把 12 和当前节点的键值 13 比较，发现 12 小于 13，把当前节点的左子节点作为当前节点。</li>
<li>把 12 和当前节点的键值 12 对比，12 等于 12，满足条件，我们从当前节点中取出 data，即 id=12，name=xm。</li>
</ul>
<p>利用二叉查找树我们只需要 3 次即可找到匹配的数据。如果在表中一条条的查找的话，我们需要 6 次才能找到。</p>
<h2 id="平衡二叉树">平衡二叉树</h2>
<p>上面我们讲解了利用二叉查找树可以快速的找到数据。但是，如果上面的二叉查找树是这样的构造：</p>
<p><img src="/post/de75e3e6/2.jpg" alt="2"></p>
<p>这个时候可以看到我们的二叉查找树变成了一个链表。如果我们需要查找 id=17 的用户信息，我们需要查找 7 次，也就相当于全表扫描了。</p>
<p>导致这个现象的原因其实是二叉查找树变得不平衡了，也就是高度太高了，从而导致查找效率的不稳定。</p>
<p>为了解决这个问题，我们需要保证二叉查找树一直保持平衡，就需要用到平衡二叉树了。</p>
<p>平衡二叉树又称 AVL 树，在满足二叉查找树特性的基础上，要求每个节点的左右子树的高度差不能超过 1。</p>
<p>下面是平衡二叉树和非平衡二叉树的对比：</p>
<p><img src="/post/de75e3e6/3.jpg" alt="3"></p>
<p>由平衡二叉树的构造我们可以发现第一张图中的二叉树其实就是一棵平衡二叉树。</p>
<p>平衡二叉树保证了树的构造是平衡的，当我们插入或删除数据导致不满足平衡二叉树不平衡时，平衡二叉树会进行调整树上的节点来保持平衡。具体的调整方式这里就不介绍了。</p>
<p>平衡二叉树相比于二叉查找树来说，查找效率更稳定，总体的查找速度也更快。</p>
<h2 id="B-树">B 树</h2>
<p>因为内存的易失性。一般情况下，我们都会选择将 user 表中的数据和索引存储在磁盘这种外围设备中。</p>
<p>但是和内存相比，从磁盘中读取数据的速度会慢上百倍千倍甚至万倍，所以，我们应当尽量减少从磁盘中读取数据的次数。</p>
<p>另外，从磁盘中读取数据时，都是按照磁盘块来读取的，并不是一条一条的读。</p>
<p>如果我们能把尽量多的数据放进磁盘块中，那一次磁盘读取操作就会读取更多数据，那我们查找数据的时间也会大幅度降低。</p>
<p>如果我们用树这种数据结构作为索引的数据结构，那我们每查找一次数据就需要从磁盘中读取一个节点，也就是我们说的一个磁盘块。</p>
<p>我们都知道平衡二叉树可是每个节点只存储一个键值和数据的。那说明什么？说明每个磁盘块仅仅存储一个键值和数据！那如果我们要存储海量的数据呢？</p>
<p>可以想象到二叉树的节点将会非常多，高度也会极其高，我们查找数据时也会进行很多次磁盘 IO，我们查找数据的效率将会极低！</p>
<p><img src="/post/de75e3e6/4.jpg" alt="4"></p>
<p>为了解决平衡二叉树的这个弊端，我们应该寻找一种单个节点可以存储多个键值和数据的平衡树。也就是我们接下来要说的 B 树。</p>
<p>B 树（Balance Tree）即为平衡树的意思，下图即是一棵 B 树：</p>
<p><img src="/post/de75e3e6/5.jpg" alt="5"></p>
<p>图中的 p 节点为指向子节点的指针，二叉查找树和平衡二叉树其实也有，因为图的美观性，被省略了。</p>
<p>图中的每个节点称为页，页就是我们上面说的磁盘块，在 MySQL 中数据读取的基本单位都是页，所以我们这里叫做页更符合 MySQL 中索引的底层数据结构。</p>
<p>从上图可以看出，B 树相对于平衡二叉树，每个节点存储了更多的键值（key）和数据（data），并且每个节点拥有更多的子节点，子节点的个数一般称为阶，上述图中的 B 树为 3 阶 B 树，高度也会很低。</p>
<p>基于这个特性，B 树查找数据读取磁盘的次数将会很少，数据的查找效率也会比平衡二叉树高很多。</p>
<p>假如我们要查找 id=28 的用户信息，那么我们在上图 B 树中查找的流程如下：</p>
<ul>
<li>先找到根节点也就是页 1，判断 28 在键值 17 和 35 之间，那么我们根据页 1 中的指针 p2 找到页 3。</li>
<li>将 28 和页 3 中的键值相比较，28 在 26 和 30 之间，我们根据页 3 中的指针 p2 找到页 8。</li>
<li>将 28 和页 8 中的键值相比较，发现有匹配的键值 28，键值 28 对应的用户信息为（28，bv）。</li>
</ul>
<h2 id="B-树-2">B+ 树</h2>
<p>B+ 树是对 B 树的进一步优化。让我们先来看下 B+ 树的结构图：</p>
<p><img src="/post/de75e3e6/6.jpg" alt="6"></p>
<p>根据上图我们来看下 B+ 树和 B 树有什么不同：</p>
<p>①B+ 树非叶子节点上是不存储数据的，仅存储键值，而 B 树节点中不仅存储键值，也会存储数据。</p>
<p>之所以这么做是因为在数据库中页的大小是固定的，InnoDB 中页的默认大小是 16KB。</p>
<p>如果不存储数据，那么就会存储更多的键值，相应的树的阶数（节点的子节点树）就会更大，树就会更矮更胖，如此一来我们查找数据进行磁盘的 IO 次数又会再次减少，数据查询的效率也会更快。</p>
<p>另外，B+ 树的阶数是等于键值的数量的，如果我们的 B+ 树一个节点可以存储 1000 个键值，那么 3 层 B+ 树可以存储 1000×1000×1000=10 亿个数据。</p>
<p>一般根节点是常驻内存的，所以一般我们查找 10 亿数据，只需要 2 次磁盘 IO。</p>
<p>②因为 B+ 树索引的所有数据均存储在叶子节点，而且数据是按照顺序排列的。</p>
<p>那么 B+ 树使得范围查找，排序查找，分组查找以及去重查找变得异常简单。而 B 树因为数据分散在各个节点，要实现这一点是很不容易的。</p>
<p>有心的读者可能还发现上图 B+ 树中各个页之间是通过双向链表连接的，叶子节点中的数据是通过单向链表连接的。</p>
<p>其实上面的 B 树我们也可以对各个节点加上链表。这些不是它们之前的区别，是因为在 MySQL 的 InnoDB 存储引擎中，索引就是这样存储的。</p>
<p>也就是说上图中的 B+ 树索引就是 InnoDB 中 B+ 树索引真正的实现方式，准确的说应该是聚集索引（聚集索引和非聚集索引下面会讲到）。</p>
<p>通过上图可以看到，在 InnoDB 中，我们通过数据页之间通过双向链表连接以及叶子节点中数据之间通过单向链表连接的方式可以找到表中所有的数据。</p>
<p>MyISAM 中的 B+ 树索引实现与 InnoDB 中的略有不同。在 MyISAM 中，B+ 树索引的叶子节点并不存储数据，而是存储数据的文件地址。</p>
<h2 id="聚集索引-VS-非聚集索引">聚集索引 VS 非聚集索引</h2>
<p>在上节介绍 B+ 树索引的时候，我们提到了图中的索引其实是聚集索引的实现方式。</p>
<p>那什么是聚集索引呢？在 MySQL 中，B+ 树索引按照存储方式的不同分为聚集索引和非聚集索引。</p>
<p>这里我们着重介绍 InnoDB 中的聚集索引和非聚集索引：</p>
<p>**①****聚集索引（聚簇索引）：**以 InnoDB 作为存储引擎的表，表中的数据都会有一个主键，即使你不创建主键，系统也会帮你创建一个隐式的主键。</p>
<p>这是因为 InnoDB 是把数据存放在 B+ 树中的，而 B+ 树的键值就是主键，在 B+ 树的叶子节点中，存储了表中所有的数据。</p>
<p>这种以主键作为 B+ 树索引的键值而构建的 B+ 树索引，我们称之为聚集索引。</p>
<p>**②****非聚集索引（非聚簇索引）：**以主键以外的列值作为键值构建的 B+ 树索引，我们称之为非聚集索引。</p>
<p>非聚集索引与聚集索引的区别在于非聚集索引的叶子节点不存储表中的数据，而是存储该列对应的主键，想要查找数据我们还需要根据主键再去聚集索引中进行查找，这个再根据聚集索引查找数据的过程，我们称为回表。</p>
<p>明白了聚集索引和非聚集索引的定义，我们应该明白这样一句话：数据即索引，索引即数据。</p>
<h2 id="利用聚集索引和非聚集索引查找数据">利用聚集索引和非聚集索引查找数据</h2>
<p>前面我们讲解 B+ 树索引的时候并没有去说怎么在 B+ 树中进行数据的查找，主要就是因为还没有引出聚集索引和非聚集索引的概念。</p>
<p>下面我们通过讲解如何通过聚集索引以及非聚集索引查找数据表中数据的方式介绍一下 B+ 树索引查找数据方法。</p>
<h3 id="利用聚集索引查找数据"><strong>利用聚集索引查找数据</strong></h3>
<p><img src="/post/de75e3e6/7.jpg" alt="7"></p>
<p>还是这张 B+ 树索引图，现在我们应该知道这就是聚集索引，表中的数据存储在其中。</p>
<p>现在假设我们要查找 id&gt;=18 并且 id&lt;40 的用户数据。对应的 sql 语句为：</p>
<p>MySQL</p>
<table>
<thead>
<tr>
<th>1</th>
<th><strong>select</strong> * <strong>from</strong> <strong>user</strong> <strong>where</strong> id&gt;=18 <strong>and</strong> id &lt;40</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>其中 id 为主键，具体的查找过程如下：</p>
<p>①一般根节点都是常驻内存的，也就是说页 1 已经在内存中了，此时不需要到磁盘中读取数据，直接从内存中读取即可。</p>
<p>从内存中读取到页 1，要查找这个 id&gt;=18 and id &lt;40 或者范围值，我们首先需要找到 id=18 的键值。</p>
<p>从页 1 中我们可以找到键值 18，此时我们需要根据指针 p2，定位到页 3。</p>
<p>②要从页 3 中查找数据，我们就需要拿着 p2 指针去磁盘中进行读取页 3。</p>
<p>从磁盘中读取页 3 后将页 3 放入内存中，然后进行查找，我们可以找到键值 18，然后再拿到页 3 中的指针 p1，定位到页 8。</p>
<p>③同样的页 8 页不在内存中，我们需要再去磁盘中将页 8 读取到内存中。</p>
<p>将页 8 读取到内存中后。因为页中的数据是链表进行连接的，而且键值是按照顺序存放的，此时可以根据二分查找法定位到键值 18。</p>
<p>此时因为已经到数据页了，此时我们已经找到一条满足条件的数据了，就是键值 18 对应的数据。</p>
<p>因为是范围查找，而且此时所有的数据又都存在叶子节点，并且是有序排列的，那么我们就可以对页 8 中的键值依次进行遍历查找并匹配满足条件的数据。</p>
<p>我们可以一直找到键值为 22 的数据，然后页 8 中就没有数据了，此时我们需要拿着页 8 中的 p 指针去读取页 9 中的数据。</p>
<p>④因为页 9 不在内存中，就又会加载页 9 到内存中，并通过和页 8 中一样的方式进行数据的查找，直到将页 12 加载到内存中，发现 41 大于 40，此时不满足条件。那么查找到此终止。</p>
<p>最终我们找到满足条件的所有数据，总共 12 条记录：</p>
<p>(18,kl), (19,kl), (22,hj), (24,io), (25,vg) , (29,jk), (31,jk) , (33,rt) , (34,ty) , (35,yu) , (37,rt) , (39,rt) 。</p>
<p>下面看下具体的查找流程图</p>
<p><img src="/post/de75e3e6/8.jpg" alt="8"></p>
<h3 id="利用非聚集索引查找数据"><strong>利用非聚集索引查找数据</strong></h3>
<p><img src="/post/de75e3e6/9-1024x626.jpg" alt="9"></p>
<p>读者看到这张图的时候可能会蒙，这是啥东西啊？怎么都是数字。如果有这种感觉，请仔细看下图中红字的解释。</p>
<p>什么？还看不懂？那我再来解释下吧。首先，这个非聚集索引表示的是用户幸运数字的索引（为什么是幸运数字？一时兴起想起来的:-)），此时表结构是这样的。</p>
<p><img src="/post/de75e3e6/640" alt="img"><a href="http://www.liuzk.com/wp-content/uploads/2019/11/91.jpg"><img src="/post/de75e3e6/91.jpg" alt="91"></a></p>
<p>在叶子节点中，不再存储所有的数据了，存储的是键值和主键。对于叶子节点中的 x-y，比如 1-1。左边的 1 表示的是索引的键值，右边的 1 表示的是主键值。</p>
<p>如果我们要找到幸运数字为 33 的用户信息，对应的 sql 语句为：</p>
<p>MySQL</p>
<table>
<thead>
<tr>
<th>1</th>
<th><strong>select</strong> * <strong>from</strong> <strong>user</strong> <strong>where</strong> luckNum=33</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>查找的流程跟聚集索引一样，这里就不详细介绍了。我们最终会找到主键值 47，找到主键后我们需要再到聚集索引中查找具体对应的数据信息，此时又回到了聚集索引的查找流程。</p>
<p>下面看下具体的查找流程图：[</p>
<p>](<a href="http://www.liuzk.com/wp-content/uploads/2019/11/92.jpg">http://www.liuzk.com/wp-content/uploads/2019/11/92.jpg</a>)</p>
<p><a href="http://www.liuzk.com/wp-content/uploads/2019/11/921.jpg"><img src="/post/de75e3e6/921.jpg" alt="92"></a>[</p>
<p>](<a href="http://www.liuzk.com/wp-content/uploads/2019/11/92.jpg">http://www.liuzk.com/wp-content/uploads/2019/11/92.jpg</a>)</p>
<p>在 MyISAM 中，聚集索引和非聚集索引的叶子节点都会存储数据的文件地址。</p>
<h2 id="总结">总结</h2>
<p>本篇文章从二叉查找树，详细说明了为什么 MySQL 用 B+ 树作为数据的索引，以及在 InnoDB 中数据库如何通过 B+ 树索引来存储数据以及查找数据。</p>
<p>我们一定要记住这句话：数据即索引，索引即数据。</p>
</body></html>]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo探索</title>
    <url>/post/38f64154/</url>
    <content><![CDATA[<html><head></head><body><h2 id="上传后删除测试">上传后删除测试</h2>
<p>可证明的是当图片上传至github后，即使在github中删除，这里的url同样有效，原因还未知</p>
<p>如以下这两张图片，搜索链接还能找到</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">![<span class="string">empty_gallery</span>](<span class="link">https://cdn.jsdelivr.net/gh/zyu0/BlogAssets/img/20210602043808.jpeg</span>)</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/zyu0/BlogAssets/img/20210602043808.jpeg" alt="empty_gallery"></p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">![<span class="string">hayward-gallery-50th-anniversary-03</span>](<span class="link">https://cdn.jsdelivr.net/gh/zyu0/BlogAssets/img/20210602043813.jpg</span>)</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/zyu0/BlogAssets/img/20210602043813.jpg" alt="hayward-gallery-50th-anniversary-03"></p>
<h2 id="同名上传测试">同名上传测试</h2>
<p>当上传至一个文件夹下时PicGo会报错，上传失败</p>
<ul>
<li>希望以后能覆盖上传</li>
</ul>
<p>切换上传文件夹后可行，如以下两张图片</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">![<span class="string">Snipaste_2021-05-28_20-06-34</span>](<span class="link">https://cdn.jsdelivr.net/gh/zyu0/BlogAssets/2021-6-2/Snipaste_2021-05-28_20-06-34.png</span>)</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/zyu0/BlogAssets/2021-6-2/Snipaste_2021-05-28_20-06-34.png" alt="Snipaste_2021-05-28_20-06-34"></p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">![<span class="string">Snipaste_2021-05-28_20-06-34</span>](<span class="link">https://cdn.jsdelivr.net/gh/zyu0/BlogAssets/img/Snipaste_2021-05-28_20-06-34.png</span>)</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/zyu0/BlogAssets/img/Snipaste_2021-05-28_20-06-34.png" alt="Snipaste_2021-05-28_20-06-34"></p>
<p>经测试，我更喜欢按写文章的日期切换上传文件夹，这样在github中整理的更清晰，文件PicGo提供了时间戳重命名功能，但我觉得那个看着实在不明确，当图片有问题去github查找太难了，保留图片名字的差异化最好。虽然PicGo也提供了上传前手动重命名的选项，但太麻烦，不够优雅</p>
<blockquote>
<p>上面方式也有一个问题，就是图片在github查找时排序不是按上传时间排列的，而是按名字排序，会导致从时间顺序查找不方便，方法还需要斟酌。</p>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>Test2</title>
    <url>/post/d87f7e0c/</url>
    <content><![CDATA[<html><head></head><body><h2 id="引用站内其他文章">引用站内其他文章</h2>
<a href="/post/dc4c1419/" title="test">test</a>
</body></html>]]></content>
  </entry>
  <entry>
    <title>代码测试</title>
    <url>/post/f8915431/</url>
    <content><![CDATA[<html><head></head><body><h1>你好</h1>
<p>我来试试代码怎么显示</p>
<span id="more"></span>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Reduce padding / margin indents on devices with narrow width.</span></span><br><span class="line"><span class="attr">mobile_layout_economy:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Android Chrome header panel color ($brand-bg / $headband-bg =&gt; $black-deep).</span></span><br><span class="line"><span class="attr">android_chrome_color:</span> <span class="string">"#222"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Custom Logo (Do not support scheme Mist)</span></span><br><span class="line"><span class="attr">custom_logo:</span> <span class="comment">#/uploads/custom-logo.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">bright</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="string">ture</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="string">ture</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line">Shader <span class="string">"Unity Shaders Book/Chapter 15/Dissolve"</span> {</span><br><span class="line">	Properties {</span><br><span class="line">		<span class="comment">//控制消融程度。0正常显示，1完全消融</span></span><br><span class="line">		_BurnAmount (<span class="string">"Burn Amount"</span>, <span class="built_in">Range</span>(<span class="number">0.0</span>, <span class="number">1.0</span>)) = <span class="number">0.0</span></span><br><span class="line">		<span class="comment">//控制模拟烧焦效果时的线宽，值越大火焰边缘蔓延越广</span></span><br><span class="line">		_LineWidth(<span class="string">"Burn Line Width"</span>, <span class="built_in">Range</span>(<span class="number">0.0</span>, <span class="number">0.2</span>)) = <span class="number">0.1</span></span><br><span class="line">		<span class="comment">//漫反射纹理</span></span><br><span class="line">		_MainTex (<span class="string">"Base (RGB)"</span>, <span class="number">2</span>D) = <span class="string">"white"</span> {}</span><br><span class="line">		<span class="comment">//法线纹理</span></span><br><span class="line">		_BumpMap (<span class="string">"Normal Map"</span>, <span class="number">2</span>D) = <span class="string">"bump"</span> {}</span><br><span class="line">		<span class="comment">//火焰边缘的两种颜色值</span></span><br><span class="line">		_BurnFirstColor(<span class="string">"Burn First Color"</span>, Color) = (<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">		_BurnSecondColor(<span class="string">"Burn Second Color"</span>, Color) = (<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">		<span class="comment">//关键的噪声纹理</span></span><br><span class="line">		_BurnMap(<span class="string">"Burn Map"</span>, <span class="number">2</span>D) = <span class="string">"white"</span>{}</span><br><span class="line">	}</span><br><span class="line">	SubShader {</span><br><span class="line">		Tags { <span class="string">"RenderType"</span>=<span class="string">"Opaque"</span> <span class="string">"Queue"</span>=<span class="string">"Geometry"</span>}</span><br><span class="line">		</span><br><span class="line">		Pass {</span><br><span class="line">			<span class="comment">//为得到正确的光照，设置LightMode和编译指令</span></span><br><span class="line">			Tags { <span class="string">"LightMode"</span>=<span class="string">"ForwardBase"</span> }</span><br><span class="line">			<span class="comment">//渲染正面背面，消融会裸露模型内部构造</span></span><br><span class="line">			Cull Off</span><br><span class="line">			</span><br><span class="line">			CGPROGRAM</span><br><span class="line">			</span><br><span class="line">			<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Lighting.cginc"</span></span></span><br><span class="line">			<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"AutoLight.cginc"</span></span></span><br><span class="line">			</span><br><span class="line">			<span class="meta">#<span class="meta-keyword">pragma</span> multi_compile_fwdbase</span></span><br><span class="line">			</span><br><span class="line">			<span class="meta">#<span class="meta-keyword">pragma</span> vertex vert</span></span><br><span class="line">			<span class="meta">#<span class="meta-keyword">pragma</span> fragment frag</span></span><br><span class="line">			</span><br><span class="line">			fixed _BurnAmount;</span><br><span class="line">			fixed _LineWidth;</span><br><span class="line">			sampler2D _MainTex;</span><br><span class="line">			sampler2D _BumpMap;</span><br><span class="line">			fixed4 _BurnFirstColor;</span><br><span class="line">			fixed4 _BurnSecondColor;</span><br><span class="line">			sampler2D _BurnMap;</span><br><span class="line">			</span><br><span class="line">			float4 _MainTex_ST;</span><br><span class="line">			float4 _BumpMap_ST;</span><br><span class="line">			float4 _BurnMap_ST;</span><br><span class="line">			</span><br><span class="line">			<span class="class"><span class="keyword">struct</span> <span class="title">a2v</span> {</span></span><br><span class="line">				float4 vertex : POSITION;</span><br><span class="line">				float3 normal : NORMAL;</span><br><span class="line">				float4 tangent : TANGENT;</span><br><span class="line">				float4 texcoord : TEXCOORD0;</span><br><span class="line">			};</span><br><span class="line">			</span><br><span class="line">			<span class="class"><span class="keyword">struct</span> <span class="title">v2f</span> {</span></span><br><span class="line">				float4 pos : SV_POSITION;</span><br><span class="line">				float2 uvMainTex : TEXCOORD0;</span><br><span class="line">				float2 uvBumpMap : TEXCOORD1;</span><br><span class="line">				float2 uvBurnMap : TEXCOORD2;</span><br><span class="line">				float3 lightDir : TEXCOORD3;</span><br><span class="line">				float3 worldPos : TEXCOORD4;</span><br><span class="line">				<span class="built_in">SHADOW_COORDS</span>(<span class="number">5</span>)</span><br><span class="line">			};</span><br><span class="line">			</span><br><span class="line">			<span class="function">v2f <span class="title">vert</span><span class="params">(a2v v)</span> </span>{</span><br><span class="line">				v2f o;</span><br><span class="line">				o.pos = <span class="built_in">UnityObjectToClipPos</span>(v.vertex);</span><br><span class="line">				<span class="comment">//使用宏计算纹理对应的纹理坐标</span></span><br><span class="line">				o.uvMainTex = <span class="built_in">TRANSFORM_TEX</span>(v.texcoord, _MainTex);</span><br><span class="line">				o.uvBumpMap = <span class="built_in">TRANSFORM_TEX</span>(v.texcoord, _BumpMap);</span><br><span class="line">				o.uvBurnMap = <span class="built_in">TRANSFORM_TEX</span>(v.texcoord, _BurnMap);</span><br><span class="line">				</span><br><span class="line">				TANGENT_SPACE_ROTATION;</span><br><span class="line">				<span class="comment">//光源方向从模型空间变换到切线空间</span></span><br><span class="line">  				o.lightDir = <span class="built_in">mul</span>(rotation, <span class="built_in">ObjSpaceLightDir</span>(v.vertex)).xyz;</span><br><span class="line">  				</span><br><span class="line">  				o.worldPos = <span class="built_in">mul</span>(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line">  				<span class="comment">//计算世界空间下的阴影纹理的采样坐标，给后面做透明度测试有正确阴影的Pass用</span></span><br><span class="line">  				<span class="built_in">TRANSFER_SHADOW</span>(o);</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">return</span> o;</span><br><span class="line">			}</span><br><span class="line">			</span><br><span class="line">			<span class="function">fixed4 <span class="title">frag</span><span class="params">(v2f i)</span> : SV_Target {</span></span><br><span class="line">				<span class="comment">//采样噪声纹理</span></span><br><span class="line">				fixed3 burn = <span class="built_in">tex2D</span>(_BurnMap, i.uvBurnMap).rgb;</span><br><span class="line">				<span class="comment">//&lt;0像素被剔除，通过正常光照计算</span></span><br><span class="line">				<span class="built_in">clip</span>(burn.r - _BurnAmount);</span><br><span class="line">				<span class="comment">//计算切线空间下的光照方向和法线</span></span><br><span class="line">				float3 tangentLightDir = <span class="built_in">normalize</span>(i.lightDir);</span><br><span class="line">				fixed3 tangentNormal = <span class="built_in">UnpackNormal</span>(<span class="built_in">tex2D</span>(_BumpMap, i.uvBumpMap));</span><br><span class="line">				<span class="comment">//材质反射率</span></span><br><span class="line">				fixed3 albedo = <span class="built_in">tex2D</span>(_MainTex, i.uvMainTex).rgb;</span><br><span class="line">				<span class="comment">//环境</span></span><br><span class="line">				fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line">				<span class="comment">//漫反射</span></span><br><span class="line">				fixed3 diffuse = _LightColor0.rgb * albedo * <span class="built_in">max</span>(<span class="number">0</span>, <span class="built_in">dot</span>(tangentNormal, tangentLightDir));</span><br><span class="line">				<span class="comment">//模拟烧焦颜色变化，t=1像素位于消融边界，t=0像素为正常模型颜色，否则在两个参数之间插值</span></span><br><span class="line">				fixed t = <span class="number">1</span> - <span class="built_in">smoothstep</span>(<span class="number">0.0</span>, _LineWidth, burn.r - _BurnAmount);</span><br><span class="line">				fixed3 burnColor = <span class="built_in">lerp</span>(_BurnFirstColor, _BurnSecondColor, t);</span><br><span class="line">				<span class="comment">//加强烧焦效果</span></span><br><span class="line">				burnColor = <span class="built_in">pow</span>(burnColor, <span class="number">5</span>);</span><br><span class="line">				</span><br><span class="line">				<span class="built_in">UNITY_LIGHT_ATTENUATION</span>(atten, i, i.worldPos);</span><br><span class="line">				fixed3 finalColor = <span class="built_in">lerp</span>(ambient + diffuse * atten, burnColor, t * <span class="built_in">step</span>(<span class="number">0.0001</span>, _BurnAmount));</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">return</span> <span class="built_in">fixed4</span>(finalColor, <span class="number">1</span>);</span><br><span class="line">			}</span><br><span class="line">			</span><br><span class="line">			ENDCG</span><br><span class="line">		}</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// Pass to render object as a shadow caster</span></span><br><span class="line">		Pass {</span><br><span class="line">			<span class="comment">//设置投射阴影的LightMod和编译指令</span></span><br><span class="line">			Tags { <span class="string">"LightMode"</span> = <span class="string">"ShadowCaster"</span> }</span><br><span class="line">			</span><br><span class="line">			CGPROGRAM</span><br><span class="line">			</span><br><span class="line">			<span class="meta">#<span class="meta-keyword">pragma</span> vertex vert</span></span><br><span class="line">			<span class="meta">#<span class="meta-keyword">pragma</span> fragment frag</span></span><br><span class="line">			</span><br><span class="line">			<span class="meta">#<span class="meta-keyword">pragma</span> multi_compile_shadowcaster</span></span><br><span class="line">			</span><br><span class="line">			<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"UnityCG.cginc"</span></span></span><br><span class="line">			</span><br><span class="line">			fixed _BurnAmount;</span><br><span class="line">			sampler2D _BurnMap;</span><br><span class="line">			float4 _BurnMap_ST;</span><br><span class="line">			</span><br><span class="line">			<span class="class"><span class="keyword">struct</span> <span class="title">v2f</span> {</span></span><br><span class="line">				<span class="comment">//内置宏帮助计算阴影投射时需要的各种变量</span></span><br><span class="line">				V2F_SHADOW_CASTER;</span><br><span class="line">				float2 uvBurnMap : TEXCOORD1;</span><br><span class="line">			};</span><br><span class="line">			</span><br><span class="line">			<span class="function">v2f <span class="title">vert</span><span class="params">(appdata_base v)</span> </span>{</span><br><span class="line">				v2f o;</span><br><span class="line">				</span><br><span class="line">				<span class="built_in">TRANSFER_SHADOW_CASTER_NORMALOFFSET</span>(o)</span><br><span class="line">				</span><br><span class="line">				o.uvBurnMap = <span class="built_in">TRANSFORM_TEX</span>(v.texcoord, _BurnMap);</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">return</span> o;</span><br><span class="line">			}</span><br><span class="line">			</span><br><span class="line">			<span class="function">fixed4 <span class="title">frag</span><span class="params">(v2f i)</span> : SV_Target {</span></span><br><span class="line">				fixed3 burn = <span class="built_in">tex2D</span>(_BurnMap, i.uvBurnMap).rgb;</span><br><span class="line">				<span class="comment">//剔除片元</span></span><br><span class="line">				<span class="built_in">clip</span>(burn.r - _BurnAmount);</span><br><span class="line">				</span><br><span class="line">				<span class="built_in">SHADOW_CASTER_FRAGMENT</span>(i)</span><br><span class="line">			}</span><br><span class="line">			ENDCG</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	FallBack <span class="string">"Diffuse"</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看系统的path环境变量</span></span><br><span class="line"><span class="comment"># 1`导入模块sys</span></span><br><span class="line"><span class="comment"># 2`sys.path 可以查看到环境变量的具体内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> sys.path:</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line"><span class="comment"># 把指定的路径加入环境变量中</span></span><br><span class="line"><span class="comment"># 追加到末尾</span></span><br><span class="line"><span class="comment"># sys.path.append("/home/zyu0/Desktop/test")</span></span><br><span class="line"><span class="comment">#　追加到开头</span></span><br><span class="line">sys.path.insert(<span class="number">0</span>,<span class="string">"/home/zyu0/Desktop/test"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"--"</span>*<span class="number">20</span>)</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> sys.path:</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> app</span><br><span class="line"><span class="built_in">print</span>(app.name)</span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <tags>
        <tag>zzz</tag>
      </tags>
  </entry>
  <entry>
    <title>重要通知</title>
    <url>/post/8efd8d8a/</url>
    <content><![CDATA[<html><head></head><body><h1>网站重构中</h1>
<p>原网页基于wordpress，对markdown文档支持不友好，目前在使用Hexo和github action重构博客系统，敬请期待！</p>
<p>原网站主要内容为作品集，目前主要是两个视频链接，在此留下Bilibili链接：</p>
<p><a href="https://space.bilibili.com/34894815/channel/detail?cid=178152&amp;ctype=0">https://space.bilibili.com/34894815/channel/detail?cid=178152&amp;ctype=0</a></p>
<p>技术文章等待上传</p>
</body></html>]]></content>
  </entry>
  <entry>
    <title>重要通知</title>
    <url>/post/8efd8d8a/</url>
    <content><![CDATA[<html><head></head><body><h1>网站重构中</h1>
<p>原网页基于wordpress，对markdown文档支持不友好，目前在使用Hexo和github action重构博客系统，敬请期待！</p>
<p>原网站主要内容为作品集，目前主要是两个视频链接，在此留下Bilibili链接：</p>
<p><a href="https://space.bilibili.com/34894815/channel/detail?cid=178152&amp;ctype=0">https://space.bilibili.com/34894815/channel/detail?cid=178152&amp;ctype=0</a></p>
<p>技术文章等待上传</p>
</body></html>]]></content>
  </entry>
</search>
